(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{265:function(a,t,s){"use strict";s.r(t);var e=s(0),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#operators","aria-hidden":"true"}},[a._v("#")]),a._v(" Operators")]),a._v(" "),s("p",[a._v("Operators allow us to manipulate values in our variables. We've already used one of them: "),s("code",[a._v("=")]),a._v(". Let's go over some of the most common.")]),a._v(" "),s("h2",{attrs:{id:"plus-and-minus"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#plus-and-minus","aria-hidden":"true"}},[a._v("#")]),a._v(" plus + and minus -")]),a._v(" "),s("p",[a._v("The "),s("code",[a._v("+")]),a._v(" and "),s("code",[a._v("-")]),a._v(" operators work much like in math. "),s("code",[a._v("+")]),a._v(" will add 2 values together, and "),s("code",[a._v("-")]),a._v(" will subtract them.")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" b\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" diff "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" b\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" quick_maths "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" sum_plus_one "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("h3",{attrs:{id:"concatenating-strings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concatenating-strings","aria-hidden":"true"}},[a._v("#")]),a._v(" Concatenating Strings")]),a._v(" "),s("p",[a._v("There is a special case for the "),s("code",[a._v("+")]),a._v(" operator when it somes to "),s("code",[a._v("String")]),a._v("s. Take the following code.")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"One half of the string. "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"The other half of the string"')]),a._v("\n")])])]),s("p",[a._v("This will result in the following value.")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"One half of the string. The other half of the string"')]),a._v("\n")])])]),s("p",[a._v("Basically a "),s("code",[a._v("+")]),a._v(" between 2 "),s("code",[a._v("String")]),a._v("s will "),s("em",[a._v("concatenate")]),a._v(" or combine them. This is useful when you want to put other values into text.")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" b\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"a + b = "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("Note: If you want to remove the "),s("code",[a._v("sum")]),a._v(" variable in this example and just use "),s("code",[a._v("a + b")]),a._v(", you need to wrap the operation in parentheses.*")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"a + b = "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v('If you didn\'t do this, you would get "a + b = 23" as including a '),s("code",[a._v("String")]),a._v(" in the operation changes it from normal math into string concatenation. The parentheses tell kotlin to add the values first, before including the result in the "),s("code",[a._v("String")]),a._v(".")]),a._v(" "),s("p",[a._v("You can avoid this all together by using "),s("router-link",{attrs:{to:"/strings/"}},[a._v("string templates")]),a._v(".")],1),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"a + b = '),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token delimiter variable"}},[a._v("${")]),a._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token delimiter variable"}},[a._v("}")])]),a._v('"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("If the value in the template is from just a variable, we can use a simpler syntax.")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" b\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"a + b = '),s("span",{pre:!0,attrs:{class:"token interpolation variable"}},[a._v("$sum")]),a._v('"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h2",{attrs:{id:"multiply-divide-and-modulus"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#multiply-divide-and-modulus","aria-hidden":"true"}},[a._v("#")]),a._v(" multiply *, divide /, and modulus %")]),a._v(" "),s("p",[a._v("The "),s("code",[a._v("*")]),a._v(" and "),s("code",[a._v("/")]),a._v(" opererators represent multiply and divide respectively.")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.0")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2.0")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("prinlnt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('// "2.0"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('// will be roughtly "0.5"')]),a._v("\n")])])]),s("p",[a._v("The "),s("code",[a._v("%")]),a._v(" operator will return the remainder of a division. For example")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n")])])]),s("p",[a._v("will yield a value of 1, as 5 divided by for is 1 with a remainder of 1.")]),a._v(" "),s("p",[a._v("Be aware that if you divide by "),s("code",[a._v("0")]),a._v(". Your program will crash. We'll talk a bit more about how to handle errors like this when we talk about "),s("router-link",{attrs:{to:"/kotlin/exceptions/"}},[a._v("exceptions")])],1),a._v(" "),s("h2",{attrs:{id:"equals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#equals","aria-hidden":"true"}},[a._v("#")]),a._v(" equals =")]),a._v(" "),s("p",[a._v("The "),s("code",[a._v("=")]),a._v(" operator sets the expresion on the left equal to the expression on the right. It is known as the assignment operator.")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" b\n")])])]),s("p",[a._v("We can have multiple "),s("code",[a._v("=")]),a._v(" statements on one line.")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Int\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Int\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n")])])]),s("p",[a._v("The "),s("code",[a._v("=")]),a._v(" operator doesn't not work with values of different types. You can set an "),s("code",[a._v("Int")]),a._v(" variable to a "),s("code",[a._v("String")]),a._v(" literal for example")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Int "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"10"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Doesn't compile!")]),a._v("\n")])])]),s("h3",{attrs:{id:"the-plus-equals-minus-equals-multiply-equals-and-divide-equals-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-plus-equals-minus-equals-multiply-equals-and-divide-equals-operators","aria-hidden":"true"}},[a._v("#")]),a._v(" The plus equals += minus equals -=  multiply equals *= and divide equals /= operators")]),a._v(" "),s("p",[a._v("Consider the following.")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("p",[a._v("This can be simplified using the "),s("code",[a._v("+=")]),a._v(" operator.")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("h2",{attrs:{id:"increment-and-decrement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#increment-and-decrement","aria-hidden":"true"}},[a._v("#")]),a._v(" increment ++ and decrement --")]),a._v(" "),s("p",[a._v("These are the increment and decrement operators. The increase, or decrease a value by 1. There a little weird to work with though. Consider the following.")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v("\n")])])]),s("p",[a._v("In this example we use the increment operator to increase the value in "),s("code",[a._v("a")]),a._v(" by 1. It would make sense for "),s("code",[a._v("b")]),a._v(" to also be one, but it's actually 0. This is because we are post-incrementing "),s("code",[a._v("a")]),a._v(". This code basically translates to")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("p",[a._v("We can use the pre-fix style if we want "),s("code",[a._v("b")]),a._v(" to the same value of "),s("code",[a._v("a")]),a._v(" after the increment.")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v("a\n")])])]),s("p",[a._v("There's a lot of literature discussing how "),s("code",[a._v("++")]),a._v(" and "),s("code",[a._v("--")]),a._v(" are actually really bad to use, and that you should stick to "),s("code",[a._v("+=")]),a._v(" and "),s("code",[a._v("-=")]),a._v(" instead, but you'll see them in other peoples code, so it's good to know what they do.")]),a._v(" "),s("h2",{attrs:{id:"and-or-and-not"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#and-or-and-not","aria-hidden":"true"}},[a._v("#")]),a._v(" and &&, or &&, and not !")]),a._v(" "),s("p",[a._v("These operators manipulate "),s("code",[a._v("Boolean")]),a._v(" values. The "),s("code",[a._v("&&")]),a._v(" operator will yeild "),s("code",[a._v("true")]),a._v(" if the values on both sides are "),s("code",[a._v("true")]),a._v(".")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// true")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// false")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// false")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// false")]),a._v("\n")])])]),s("p",[a._v("The "),s("code",[a._v("||")]),a._v(" operator will yield "),s("code",[a._v("true")]),a._v(" if at least one of the sides is "),s("code",[a._v("true")]),a._v(".")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// true")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// true")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// true")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// false")]),a._v("\n")])])]),s("p",[a._v("The "),s("code",[a._v("!")]),a._v(" operator will invert the value next to it.")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// false")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// true")]),a._v("\n")])])]),s("p",[a._v("It's important to note that "),s("code",[a._v("&&")]),a._v(" takes precedence over "),s("code",[a._v("||")]),a._v(". That means that")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n")])])]),s("p",[a._v("will be "),s("code",[a._v("false")]),a._v(", where as")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\n")])])]),s("p",[a._v("will be "),s("code",[a._v("true")]),a._v(".")]),a._v(" "),s("p",[a._v("The "),s("code",[a._v("!")]),a._v(" operator takes precedence over both of them.")]),a._v(" "),s("h2",{attrs:{id:"equals-equals-and-not-equals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#equals-equals-and-not-equals","aria-hidden":"true"}},[a._v("#")]),a._v(" equals-equals == and not-equals !=")]),a._v(" "),s("p",[a._v("The "),s("code",[a._v("==")]),a._v(" operator returns "),s("code",[a._v("true")]),a._v(" if both sides are equivalent.")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// true")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// false")]),a._v("\n")])])]),s("p",[a._v("The "),s("code",[a._v("!=")]),a._v(" operator returns "),s("code",[a._v("true")]),a._v(" if one side is different from the other.")]),a._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// false")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// true")]),a._v("\n")])])]),s("h3",{attrs:{id:"equality-with-double-and-float"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#equality-with-double-and-float","aria-hidden":"true"}},[a._v("#")]),a._v(" Equality with Double and Float")]),a._v(" "),s("p",[a._v("It's highly recommend to not use "),s("code",[a._v("==")]),a._v(" and "),s("code",[a._v("!=")]),a._v(" with values of type "),s("code",[a._v("Float")]),a._v(" and "),s("code",[a._v("Double")]),a._v(". Floating-point math tends to be impercise, so it's not uncommon to for an operation to yield a value that is extraordinarily close to the expected value, but is off by 0.000001. There are "),s("a",{attrs:{href:"https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/",target:"_blank",rel:"noopener noreferrer"}},[a._v("techniques to do this"),s("OutboundLink")],1),a._v(", but there a little less intuitive.")]),a._v(" "),s("h2",{attrs:{id:"but-wait-there-s-more"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#but-wait-there-s-more","aria-hidden":"true"}},[a._v("#")]),a._v(" But wait, there's more!")]),a._v(" "),s("p",[a._v("There's a more comprehesive list in "),s("a",{attrs:{href:"https://kotlinlang.org/docs/reference/keyword-reference.html#operators-and-special-symbols",target:"_blank",rel:"noopener noreferrer"}},[a._v("the documentation"),s("OutboundLink")],1),a._v(".")])])}),[],!1,null,null,null);t.default=r.exports}}]);